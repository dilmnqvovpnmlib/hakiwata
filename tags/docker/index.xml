<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on haKiwata</title><link>https://hakiwata.jp/tags/docker/</link><description>Recent content in Docker on haKiwata</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 haKiwata</copyright><lastBuildDate>Tue, 30 Nov 2021 18:35:39 +0000</lastBuildDate><atom:link href="https://hakiwata.jp/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>CyberAgent のコンテナ技術に関する勉強会に参加してきた</title><link>https://hakiwata.jp/post/20211124/</link><pubDate>Tue, 30 Nov 2021 18:35:39 +0000</pubDate><guid>https://hakiwata.jp/post/20211124/</guid><description>概要 先日 2021/11/24 に CyberAgent が主催するCA 1Day Youth Boot Camp バックエンド/インフラエンジニア編：現場で使うコンテナ技術、Kubernetes＆コンテナ入門と言う勉強会に参加してきました。これは、CyberAgent での社内の研修を 1 日体験できるイベントでした。今回は、その参加記を書きたいと思います。 参加したキッカケ 普段から Docker や Kubenetes を活用して趣味のプログラムや研究のコードを書いたりしています。しかし、これまでこれらの技術はほとんど独学で勉強をしてきました。そのため、自分の理解のレベル感が客観的に把握したことがありませんでした。また、最近 ES を書いたり外部の勉強会に参加するといった活動をしていませんでした。そんな時に、Twitter でたまたまこのイベントを見つけ、久しぶりにこういったチャンスに挑んでみたいと思い参加してみました。 学んだこと Kubernetes の基礎編 で Kubernetes の基本的なコンセプトや原理を復習できました。 コンテナレジストリのミラーリポジトリに mirror.gcr.io 活用すると、Docker Hub のレート制限を抑えることができることを初めて知りました。 Kubernetes in Docker (kind) と言う Docker コンテナのノードを使ってローカルに Kubernetes クラスタを実行するためのツールを初めて知りました。 kubectl edit コマンドや kubectl run コマンドを始めて使いました。 Kubernetes 内の Pod からしかアクセスできない Pod に対して、busybox と kubectl run コマンドを用いたデバッグを初めて知りました。 感想 学んだことに書いたように、知らなかったことをたくさん知るキッカケになりました。また、特に Kubernetes の研修に関しては、CyberAgentHack/one-day-youth-bootcamp-ciu にある演習問題を解いて手を動かす時間も設けられていたので、とても楽しかったです！ (演習問題は簡単でした。) しかし、この勉強会で学んだことと実際に現場で必要な知識や技術力にはかなり乖離があると感じました。そのため、Kubernetes を実際に運用するレベルのアプリケーションの実装を検討してみたいと思いました🤞 参考 コンテナ技術入門 Kubernetes の基礎編 CyberAgentHack/one-day-youth-bootcamp-ciu Container Registry の Docker Hub ミラーの使用 kind busybox どのリクエストにも決まったレスポンスを返す、http-echoサーバー</description></item><item><title>このブログで使用した技術について</title><link>https://hakiwata.jp/post/20211110/</link><pubDate>Wed, 10 Nov 2021 11:17:18 +0000</pubDate><guid>https://hakiwata.jp/post/20211110/</guid><description>概要 こんにちは！このブログを立ち上げてから約半年が経ちました。カスタマイズ性が高く簡単に運用できています。また、自分の書いた記事が積み重なっていく様子が可視化されるのが単純に嬉しいので、定期的なアウトプットに役立っています。そこで、今回はこのブログを作成するにあたって使用した技術などについて改めて振り返りたいと思います。 背景 このブログには様々な機能を加えたりして工夫を行っています。具体的には以下の 8 つが挙げられます。過去にブログにまとめた記事もあるので、それ以外を補足しつつどう工夫してこのブログが成り立っているかについて説明したいと思います。 Hugo と GitHub Pages を用いて開発 自動でデプロイするフローの導入 (CI/CD の構築) テンプレートを修正する 他のリポジトリとの連携 開発環境の Docker 化 バグの調査 Google Analytics の導入 OGP の作成 まず、1 に関して補足して説明します。このブログ (ポートフォリオ) は第三世代になります。第一世代は React + GitHub Pages のシンプルな構成で運用していました。あまり頻繁に更新するものでもなかったのですが、自動デプロイのパイプラインは構築していました。リポジトリは dilmnqvovpnmlib になります。第二世代は、React + Django + EC2 で運用していました。これは、単純にフロントエンドとバックエンドを分割させた形のアプリケーションを実装したかったという意図もあり、このような構成となりました。各アプリケーションは Docker と docker-compose を使用して Nginx のコンテナを経由して通信します。リポジトリは hk-41 になります。これらの 2 つのポートフォリオには単純に自己紹介をするページしかなく、ブログを投稿する機能がありませんでした。そこで、楽に運用でき拡張性も高い Hugo と GitHub Pages で新しく作り直したのがこのブログでした。
次に、2 に関して補足して説明します。main ブランチ に About と Post と Scraps の修正コードを push すると、GitHub Actions 上で設定したパイプラインが走ります。そうすると、ソースコードをビルドし自動でデプロイしてくれるようなフローを構築しています。この結果、デプロイのコマンドを逐一思い出す必要がなく、属人性を省いたデプロイができて嬉しいです。このブログは基本的には自分しか操作しない想定で作られています。そのため、プルリクを作成し、複数人の Approve を得てからデプロイを行うといった実務的なフローは構築していません。</description></item><item><title>自作ブログの開発環境を
Docker で移行した</title><link>https://hakiwata.jp/post/20210628/</link><pubDate>Sat, 26 Jun 2021 20:39:56 +0000</pubDate><guid>https://hakiwata.jp/post/20210628/</guid><description>概要 こんにちは！前回は、Hugo で Markdown が上手く parse されない原因を調査してみたという記事を書きました。この際、開発環境を Docker で作ることで、 Hugo のバージョンを上げました。そこで今回は、開発環境の移行で行ったことについての記録を残したいと思います。 背景と目的 もともとはホスト OS に Hugo のバイナリをインストールして開発環境を構築していました。しかし、この開発方法だと前回の記事のように Hugo のバイナリのバージョンを上げたいと思った時にすぐにバージョンアップをすることが面倒臭いです。そのため、今回は make コマンド と Docker を使用して開発の体験を上げ、Hugo のバージョンの変更に対応しやすいように開発環境を作り直しました。 方法 以下の 3 つの機能を make コマンド でまとめることが最終目標でした。 Hugo のバージョン管理をしやすくすること 開発用サーバを起動するコマンドを作ること 新規コンテンツを作成するコマンドを作ること 今回、実際に実装した Makefile は以下のようになりました。VERSION 変数 で Hugo のバージョン管理をしやすくしています。また、make server コマンドで開発用サーバが起動し、make new D=&amp;quot;directory name&amp;quot; で新規コンテンツのセットアップを行うようにしました。 VERSION=0.83.1 PORT=1313 OLD_VERSION=0.65.3 $(eval USER_ID := $(shell id -u $(USER))) $(eval GROUP_ID := $(shell id -g $(USER))) .</description></item></channel></rss>