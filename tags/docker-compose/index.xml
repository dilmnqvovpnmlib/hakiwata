<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker-compose on haKiwata</title><link>https://hakiwata.jp/tags/docker-compose/</link><description>Recent content in docker-compose on haKiwata</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 haKiwata</copyright><lastBuildDate>Wed, 10 Nov 2021 11:17:18 +0000</lastBuildDate><atom:link href="https://hakiwata.jp/tags/docker-compose/index.xml" rel="self" type="application/rss+xml"/><item><title>このブログで使用した技術について</title><link>https://hakiwata.jp/post/20211110/</link><pubDate>Wed, 10 Nov 2021 11:17:18 +0000</pubDate><guid>https://hakiwata.jp/post/20211110/</guid><description>概要 こんにちは！このブログを立ち上げてから約半年が経ちました。カスタマイズ性が高く簡単に運用できています。また、自分の書いた記事が積み重なっていく様子が可視化されるのが単純に嬉しいので、定期的なアウトプットに役立っています。そこで、今回はこのブログを作成するにあたって使用した技術などについて改めて振り返りたいと思います。 背景 このブログには様々な機能を加えたりして工夫を行っています。具体的には以下の 8 つが挙げられます。過去にブログにまとめた記事もあるので、それ以外を補足しつつどう工夫してこのブログが成り立っているかについて説明したいと思います。 Hugo と GitHub Pages を用いて開発 自動でデプロイするフローの導入 (CI/CD の構築) テンプレートを修正する 他のリポジトリとの連携 開発環境の Docker 化 バグの調査 Google Analytics の導入 OGP の作成 まず、1 に関して補足して説明します。このブログ (ポートフォリオ) は第三世代になります。第一世代は React + GitHub Pages のシンプルな構成で運用していました。あまり頻繁に更新するものでもなかったのですが、自動デプロイのパイプラインは構築していました。リポジトリは dilmnqvovpnmlib になります。第二世代は、React + Django + EC2 で運用していました。これは、単純にフロントエンドとバックエンドを分割させた形のアプリケーションを実装したかったという意図もあり、このような構成となりました。各アプリケーションは Docker と docker-compose を使用して Nginx のコンテナを経由して通信します。リポジトリは hk-41 になります。これらの 2 つのポートフォリオには単純に自己紹介をするページしかなく、ブログを投稿する機能がありませんでした。そこで、楽に運用でき拡張性も高い Hugo と GitHub Pages で新しく作り直したのがこのブログでした。
次に、2 に関して補足して説明します。main ブランチ に About と Post と Scraps の修正コードを push すると、GitHub Actions 上で設定したパイプラインが走ります。そうすると、ソースコードをビルドし自動でデプロイしてくれるようなフローを構築しています。この結果、デプロイのコマンドを逐一思い出す必要がなく、属人性を省いたデプロイができて嬉しいです。このブログは基本的には自分しか操作しない想定で作られています。そのため、プルリクを作成し、複数人の Approve を得てからデプロイを行うといった実務的なフローは構築していません。</description></item></channel></rss>