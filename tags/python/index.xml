<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on haKiwata</title><link>https://hakiwata.jp/tags/python/</link><description>Recent content in Python on haKiwata</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 haKiwata</copyright><lastBuildDate>Wed, 10 Nov 2021 11:17:18 +0000</lastBuildDate><atom:link href="https://hakiwata.jp/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>このブログで使用した技術について</title><link>https://hakiwata.jp/post/20211110/</link><pubDate>Wed, 10 Nov 2021 11:17:18 +0000</pubDate><guid>https://hakiwata.jp/post/20211110/</guid><description>概要 こんにちは！このブログを立ち上げてから約半年が経ちました。カスタマイズ性が高く簡単に運用できています。また、自分の書いた記事が積み重なっていく様子が可視化されるのが単純に嬉しいので、定期的なアウトプットに役立っています。そこで、今回はこのブログを作成するにあたって使用した技術などについて改めて振り返りたいと思います。 背景 このブログには様々な機能を加えたりして工夫を行っています。具体的には以下の 8 つが挙げられます。過去にブログにまとめた記事もあるので、それ以外を補足しつつどう工夫してこのブログが成り立っているかについて説明したいと思います。 Hugo と GitHub Pages を用いて開発 自動でデプロイするフローの導入 (CI/CD の構築) テンプレートを修正する 他のリポジトリとの連携 開発環境の Docker 化 バグの調査 Google Analytics の導入 OGP の作成 まず、1 に関して補足して説明します。このブログ (ポートフォリオ) は第三世代になります。第一世代は React + GitHub Pages のシンプルな構成で運用していました。あまり頻繁に更新するものでもなかったのですが、自動デプロイのパイプラインは構築していました。リポジトリは dilmnqvovpnmlib になります。第二世代は、React + Django + EC2 で運用していました。これは、単純にフロントエンドとバックエンドを分割させた形のアプリケーションを実装したかったという意図もあり、このような構成となりました。各アプリケーションは Docker と docker-compose を使用して Nginx のコンテナを経由して通信します。リポジトリは hk-41 になります。これらの 2 つのポートフォリオには単純に自己紹介をするページしかなく、ブログを投稿する機能がありませんでした。そこで、楽に運用でき拡張性も高い Hugo と GitHub Pages で新しく作り直したのがこのブログでした。
次に、2 に関して補足して説明します。main ブランチ に About と Post と Scraps の修正コードを push すると、GitHub Actions 上で設定したパイプラインが走ります。そうすると、ソースコードをビルドし自動でデプロイしてくれるようなフローを構築しています。この結果、デプロイのコマンドを逐一思い出す必要がなく、属人性を省いたデプロイができて嬉しいです。このブログは基本的には自分しか操作しない想定で作られています。そのため、プルリクを作成し、複数人の Approve を得てからデプロイを行うといった実務的なフローは構築していません。</description></item><item><title>自作 OS のリポジトリの README.md を自動更新する</title><link>https://hakiwata.jp/post/20210911/</link><pubDate>Fri, 10 Sep 2021 15:50:53 +0000</pubDate><guid>https://hakiwata.jp/post/20210911/</guid><description>概要 こんにちは！先月から 自作 OS に取り組んでいます。その進捗を綴った日記は 自作 OS 日記 にあり、日記にはその日までに出来上がった OS の挙動を記録した GIF を載せています。これまでは、この日記を更新すると、手動で 自作 OS のリポジトリの README.md に最新の OS GIF のリンクを貼り付けていました。ですが、最近、その作業がすごく面倒臭くなってきました。そこで、今回は 自作 OS 日記 を更新すると、 自作 OS のリポジトリの README.md も同時にアップデートされるように行った自動化の記録について書き残したいと思います。 方法 今回の自動化では、以下のようなパイプラインを構築しました。 一番のポイントは、リポジトリを跨いだ GitHub Actions のワークフローの連携です。これを実現するために、Repository Dispatch というアクションを使用しました。このアクションを用いて、自作 OS 日記 のコンテンツ配下のみが更新されると、workflow が走るような設計になっています。
このアクションでは、client-payload というペイロードを活用すると、通知先にデータを送信することができます。いわゆる HTTP の POST メソッドのようなことができます。したがって、日記を更新した段階で最新の GIF のリンクを取得できれば、このパラメータを活用して 自作 OS リポジトリにその最新のファイル名を通知することができます。今回の自動化の流れでは、この最新の GIF のファイル名を Python と GitHub の API を用いて取得します。一番初めは、このやり方で実装を考えていたのですが、日記側のリポジトリと自作 OS 側のリポジトリの両方で Python のスクリプトを用意する必要がありました。これでは、双方のリポジトリに README.</description></item></channel></rss>