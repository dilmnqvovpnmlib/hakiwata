<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on haKiwata</title><link>https://hakiwata.jp/tags/python/</link><description>Recent content in Python on haKiwata</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 haKiwata</copyright><lastBuildDate>Fri, 03 Dec 2021 16:15:28 +0000</lastBuildDate><atom:link href="https://hakiwata.jp/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python</title><link>https://hakiwata.jp/log/python/</link><pubDate>Fri, 03 Dec 2021 16:15:28 +0000</pubDate><guid>https://hakiwata.jp/log/python/</guid><description>概要 Python 関連の記事を読んだ際のメモを残す。 記事とメモ Python メモ – プライベート メソッド 関数名にの先頭に __ が付くと、プライベートメソッドになり、普通の呼び出し方では呼び出せない。しかし、どうしても呼び出したい時は、(インスタンス名)._(クラス名)(プライベートメソッド名) で呼び出すことが可能である。 Python メモ – データクラス @dataclasses をクラスにデコレートしメンバ変数に型と共に宣言する。そうすると、以前は必要だった __init__ メソッドの self 以降に指定する変数とその初期化を省略することができる。 ちなみに、以下の画像のように __init__ が呼び出される際に、定義した関数を呼び出すこともできる。 dataclasses &amp;mdash; データクラス Python メモ – セイウチ演算子 セイウチ演算子により広いスコープに変数を宣言しなくて済むので非常に便利な演算子である。ただし、Python 3.8 以降でないと使えない。 C++ の if などで使用した記憶があり、便利な印象だった。 代入式 Python メモ – 設定ファイル
uwsgi.ini といった ini ファイル を読み出す際に使える標準ライブラリである。python-dotenv の ini ファイル バージョンである。 configparser &amp;mdash; 設定ファイルのパーサー Python メモ – REST APIのテスト</description></item><item><title>OGP 画像のタイトルを作成する
実装方針の比較と検討</title><link>https://hakiwata.jp/post/20211201/</link><pubDate>Wed, 01 Dec 2021 09:27:59 +0000</pubDate><guid>https://hakiwata.jp/post/20211201/</guid><description>概要 この自作ブログの OGP 画像は Python と GitHub Actions を使って自動生成するようになっています。ブログのタイトルを使用して良い感じに調整することで、OGP 画像のタイトルをつけます。しかし、先日投稿したブログの OGP 画像のタイトルのレイアウトが崩れていました。そこで、今回は OGP 画像のタイトルをつけるための実装方針を再度考え直します。そして、実装に必要なライブラリの比較と検討を行いたいと思います。 事の発端 (原因) とライブラリの比較と検討を行おうと思った背景 先日投稿したブログエントリの CyberAgent のコンテナ技術に関する勉強会に参加してきた の OGP 画像が意図した形になっていませんでした。以下の図 1 の画像が実際に生成されていた OPG 画像で、図 2 のような画像が生成されて欲しかった画像です。 図 1 タイトルのレイアウトがズレてしまった OGP 画像 図 2 タイトルのレイアウトが良い感じの形の OGP 画像 図 2 では、日本語の文脈的にもレイアウト的にも良い感じの箇所で改行されています。一方、図 1 では、タイトルの 2 行目が長くなりすぎてしまい、端の文字が切れてしまっています。そこでまず、現時点での OGP 画像を生成するためのロジックについて説明したいと思います。
まず、タイトルがそれほど長くない場合 (30 文字以内) には、そのままタイトルを付けるようにしています。しかし、タイトルが 30 文字より大きくなると、改行処理を挟んでタイトルを付けるような実装になっています。この改行処理には、textwrap という Python の標準ライブラリを活用しています。つまり、タイトルが 30 文字以上の場合には、textwrap のアルゴリズムに従ってタイトルの分割処理が行われます。その分割処理によって、改行させてタイトルを付けます。
これに加えて、Hugo のフロントマターに追加するフラグに応じた改行処理も実装されています。Hugo のフロントマターのタイトルの箇所に改行用のフラグ (\n) を追加すると、それを起点に改行された OGP 画像が生成されます。つまり、手動でタイトルの改行箇所を決めることができます。</description></item><item><title>CPython 調査ログ</title><link>https://hakiwata.jp/log/cpython/</link><pubDate>Wed, 17 Nov 2021 09:20:23 +0000</pubDate><guid>https://hakiwata.jp/log/cpython/</guid><description>概要 CPython のソースコードリーディングを行い、言語拡張やデータ構造がどのように C 言語で実装されているかを調査する。今回の調査で使用している Python は Python 3.11.0a2+ である。 調査ログ 2021/11/16 初期設定とプログラムのビルドを行う。ディレクトリは git から落としてきた cpython ディレクトリで行う。-g オプションで実行ファイルにデバッグシンボルを埋め込む。そして、-O0 オプションで最適化度合いを最低に落とす。こうすると、GDB などのデバッガでデバッグの情報を読み出すことができる。また、--prefix オプションでインストールするフォルダを指定する。 cd oss/ git clone https://github.com/python/cpython.git cd cpython CFLAGS=&amp;#34;-O0 -g&amp;#34; ./configure --with-pydebug --prefix=/home/h-kiwata/fuga make -j $(nproc) make install ${HOME}/fuga/bin/python3 main.py でビルドしたバイナリで Python のファイルを実行することができる。ちなみに、main.py の中身は以下である。 a = 1000 a += 20 print(&amp;#39;Hello World&amp;#39;) GDB のよく使うオプション run step (s) next (n) delete (d) i b continue until 参考 Python Developer’s Guide Changing CPython’s Grammar 2021/11/17 token のオブジェクトの中身を見てみる。</description></item><item><title>このブログで使用した技術について</title><link>https://hakiwata.jp/post/20211110/</link><pubDate>Wed, 10 Nov 2021 11:17:18 +0000</pubDate><guid>https://hakiwata.jp/post/20211110/</guid><description>概要 こんにちは！このブログを立ち上げてから約半年が経ちました。カスタマイズ性が高く簡単に運用できています。また、自分の書いた記事が積み重なっていく様子が可視化されるのが単純に嬉しいので、定期的なアウトプットに役立っています。そこで、今回はこのブログを作成するにあたって使用した技術などについて改めて振り返りたいと思います。 背景 このブログには様々な機能を加えたりして工夫を行っています。具体的には以下の 8 つが挙げられます。過去にブログにまとめた記事もあるので、それ以外を補足しつつどう工夫してこのブログが成り立っているかについて説明したいと思います。 Hugo と GitHub Pages を用いて開発 自動でデプロイするフローの導入 (CI/CD の構築) テンプレートを修正する 他のリポジトリとの連携 開発環境の Docker 化 バグの調査 Google Analytics の導入 OGP の作成 まず、1 に関して補足して説明します。このブログ (ポートフォリオ) は第三世代になります。第一世代は React + GitHub Pages のシンプルな構成で運用していました。あまり頻繁に更新するものでもなかったのですが、自動デプロイのパイプラインは構築していました。リポジトリは dilmnqvovpnmlib になります。第二世代は、React + Django + EC2 で運用していました。これは、単純にフロントエンドとバックエンドを分割させた形のアプリケーションを実装したかったという意図もあり、このような構成となりました。各アプリケーションは Docker と docker-compose を使用して Nginx のコンテナを経由して通信します。リポジトリは hk-41 になります。これらの 2 つのポートフォリオには単純に自己紹介をするページしかなく、ブログを投稿する機能がありませんでした。そこで、楽に運用でき拡張性も高い Hugo と GitHub Pages で新しく作り直したのがこのブログでした。
次に、2 に関して補足して説明します。main ブランチ に About と Post と Scraps の修正コードを push すると、GitHub Actions 上で設定したパイプラインが走ります。そうすると、ソースコードをビルドし自動でデプロイしてくれるようなフローを構築しています。この結果、デプロイのコマンドを逐一思い出す必要がなく、属人性を省いたデプロイができて嬉しいです。このブログは基本的には自分しか操作しない想定で作られています。そのため、プルリクを作成し、複数人の Approve を得てからデプロイを行うといった実務的なフローは構築していません。</description></item><item><title>自作 OS のリポジトリの README.md を自動更新する</title><link>https://hakiwata.jp/post/20210911/</link><pubDate>Fri, 10 Sep 2021 15:50:53 +0000</pubDate><guid>https://hakiwata.jp/post/20210911/</guid><description>概要 こんにちは！先月から 自作 OS に取り組んでいます。その進捗を綴った日記は 自作 OS 日記 にあり、日記にはその日までに出来上がった OS の挙動を記録した GIF を載せています。これまでは、この日記を更新すると、手動で 自作 OS のリポジトリの README.md に最新の OS GIF のリンクを貼り付けていました。ですが、最近、その作業がすごく面倒臭くなってきました。そこで、今回は 自作 OS 日記 を更新すると、 自作 OS のリポジトリの README.md も同時にアップデートされるように行った自動化の記録について書き残したいと思います。 方法 今回の自動化では、以下のようなパイプラインを構築しました。 一番のポイントは、リポジトリを跨いだ GitHub Actions のワークフローの連携です。これを実現するために、Repository Dispatch というアクションを使用しました。このアクションを用いて、自作 OS 日記 のコンテンツ配下のみが更新されると、workflow が走るような設計になっています。
このアクションでは、client-payload というペイロードを活用すると、通知先にデータを送信することができます。いわゆる HTTP の POST メソッドのようなことができます。したがって、日記を更新した段階で最新の GIF のリンクを取得できれば、このパラメータを活用して 自作 OS リポジトリにその最新のファイル名を通知することができます。今回の自動化の流れでは、この最新の GIF のファイル名を Python と GitHub の API を用いて取得します。一番初めは、このやり方で実装を考えていたのですが、日記側のリポジトリと自作 OS 側のリポジトリの両方で Python のスクリプトを用意する必要がありました。これでは、双方のリポジトリに README.</description></item></channel></rss>