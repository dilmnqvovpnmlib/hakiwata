<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on haKiwata</title><link>https://hakiwata.jp/tags/python/</link><description>Recent content in Python on haKiwata</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 haKiwata</copyright><lastBuildDate>Fri, 10 Sep 2021 15:50:53 +0000</lastBuildDate><atom:link href="https://hakiwata.jp/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>自作 OS のリポジトリの README.md を自動更新する</title><link>https://hakiwata.jp/post/20210911/</link><pubDate>Fri, 10 Sep 2021 15:50:53 +0000</pubDate><guid>https://hakiwata.jp/post/20210911/</guid><description>概要 こんにちは！先月から 自作 OS に取り組んでいます。その進捗を綴った日記は 自作 OS 日記 にあり、日記にはその日までに出来上がった OS の挙動を記録した GIF を載せています。これまでは、この日記を更新すると、手動で 自作 OS のリポジトリの README.md に最新の OS GIF のリンクを貼り付けていました。ですが、最近、その作業がすごく面倒臭くなってきました。そこで、今回は 自作 OS 日記 を更新すると、 自作 OS のリポジトリの README.md も同時にアップデートされるように行った自動化の記録について書き残したいと思います。 方法 今回の自動化では、以下のようなパイプラインを構築しました。 一番のポイントは、リポジトリを跨いだ GitHub Actions のワークフローの連携です。これを実現するために、Repository Dispatch というアクションを使用しました。このアクションを用いて、自作 OS 日記 のコンテンツ配下のみが更新されると、workflow が走るような設計になっています。
このアクションでは、client-payload というペイロードを活用すると、通知先にデータを送信することができます。いわゆる HTTP の POST メソッドのようなことができます。したがって、日記を更新した段階で最新の GIF のリンクを取得できれば、このパラメータを活用して 自作 OS リポジトリにその最新のファイル名を通知することができます。今回の自動化の流れでは、この最新の GIF のファイル名を Python と GitHub の API を用いて取得します。一番初めは、このやり方で実装を考えていたのですが、日記側のリポジトリと自作 OS 側のリポジトリの両方で Python のスクリプトを用意する必要がありました。これでは、双方のリポジトリに README.</description></item></channel></rss>