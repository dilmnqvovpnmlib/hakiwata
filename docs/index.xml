<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haKiwata</title>
    <link>https://hakiwata.jp/</link>
    <description>Recent content on haKiwata</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021 haKiwata</copyright>
    <lastBuildDate>Sat, 29 May 2021 00:08:15 +0900</lastBuildDate>
    
	<atom:link href="https://hakiwata.jp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Network Programming の基礎を学んだ</title>
      <link>https://hakiwata.jp/post/20210529/</link>
      <pubDate>Sat, 29 May 2021 00:08:15 +0900</pubDate>
      
      <guid>https://hakiwata.jp/post/20210529/</guid>
      <description>概要  こんにちは！ゴールデンウィーク明けから 基礎からわかるTCP/IP ネットワーク実験プログラミング（第2版） を読んでいました。この本は マスタリングTCP/IP―入門編―(第6版) の著者の一人である 村山公保先生 が書かれた本です。丁度今日に読み終えたので、なぜ読み始めたのかや何を学んだかなどの記録を残したいと思います。  読み始めたきっかけ  この本を読もうと思ったきっかけは、システムプログラミングをしつつ、ネットワークプロトコル (Ethernet/ARP/IP/ICMP/TCP/UDP) を C 言語のプログラムレベルで理解したいと思ったからです。例えば TCP のヘッダの構造体は Ubuntu のどのパスに定義されていて、それを用いて、システムコールをどのように呼び出せば TCP のパケットを作って通信できるかなどです。大学/大学院の講義やマスタリングTCP/IP や普段の Web プログラミングを通して、基本的な通信の概念は知っていました。しかし、プロトコルをプログラムレベルでイメージできるほどは理解できていませんでした。そのため、ネットワークプロトコルの実装が C 言語のプログラムレベルでイメージできるようになることが、この本を読む目的でした。  学んだこと   この本を通して学んだことを列挙します。
 プログラムレベルでのプロトコルの解説 ネットワークプロトコルに必要な構造体、システムコール、ライブラリ関数の使い方とそれらの調査方法 socket システムコールを用いた UDP Client/UDP Server の実装 socket システムコールを用いた TCP Client/TCP Server の実装 パケットモニタリングを行い Ethernet/ARP/IP/ICMP/TCP/UDP のヘッダの解析 IP スキャン / TCP ポートスキャン / UDP ポートスキャン の実装 ARP 要求パケットや ARP 応答パケットを用いた対象のホストの ARP テーブルを書き換える攻撃手法の実装 ICMP redirect を用いた対象のホストのルーティングテーブルを書き換える攻撃手法の実装 IP ヘッダの TTL を用いた traceroute コマンドのようなものを実装 TCP のヘッダを作成し、SYN flood 攻撃の実装 TCP のヘッダを作成し、 ESTABLISHED な TCP のコネクションを強制的に切断する攻撃手法の実装 TCP のヘッダを作成し、TCP ジャックをする攻撃手法の実装    システムコールを用いた自作クライアントとサーバの実装、パケットモニタリング、攻撃手法の再現を通して、ネットワークプロトコルの構造や各レイヤーの関係性を学ぶことができました。読み応えのある非常に良い本でした。理解があやふやな箇所もあるので、期間を空けて本を読み直したいと思いました。</description>
    </item>
    
    <item>
      <title>今年中に一つでも多く勉強したいこと</title>
      <link>https://hakiwata.jp/post/20210518/</link>
      <pubDate>Tue, 18 May 2021 04:27:07 +0900</pubDate>
      
      <guid>https://hakiwata.jp/post/20210518/</guid>
      <description>概要  こんにちは！最近は、ネットワーク周りのシステムコールやライブラリ関数の調査と検証が多く、わかりやすい進捗が出ていない気がしています。そこで、気晴らしに今年中に勉強したいことを洗い出してみました。一旦アウトプットすることで、頭の中がクリアになればと思っています。  勉強したい内容 今年入って勉強してきたことの上乗せ   低レベルプログラミング を読む
 アセンブリ言語や C 言語や型システムを学びたい。 また、今年は、C 言語やアセンブリ言語を勉強してきたので、新たな書籍で体系的に学びたい。    例解UNIX/Linuxプログラミング教室: システムコールを使いこなすための12講 を読む
 今年は、シスプロを多めに勉強してきたので、違う書籍の違う観点から新しい知見を得たい。    ハロー“Hello, World” OSと標準ライブラリのシゴトとしくみ を読む
 動的解析の観点からシステムコールを学びたい。    Hacking: 美しき策謀 第2版 ―脆弱性攻撃の理論と実際 を読む
 今年に学んだことを PWN などに応用して、セキュリティ的な観点からも更に理解を深めたい。    ふつうの Linux プログラミングの Http Server の章を読み直す
 基礎からわかるTCP/IP ネットワーク実験プログラミング（第2版）でネットワークプログラミングの基礎を学び直した。新たな知識を持った状態で復習したい。    使ったことのある OSS のソースコードを読む
 ユーザ空間における最下層のプログラミングを学んだので、違う観点から抽象化や更に深い層を学びたい。 requests や Linux などソースコードを読んで、バグが見つかればプルリクを投げたい。    OS の基本的な機能を整理する</description>
    </item>
    
    <item>
      <title>振り返り</title>
      <link>https://hakiwata.jp/post/20210512/</link>
      <pubDate>Wed, 12 May 2021 03:07:55 +0900</pubDate>
      
      <guid>https://hakiwata.jp/post/20210512/</guid>
      <description>概要  こんにちは！今年も月日が経つのが早く 1 年の内の 1/3 が過ぎ去ってしまいました。後輩や友達に今年に入って何を勉強してきたのかを聞かれることがたまにあるので、その記録を残していきたいと思います。基本的に大学院の課題や研究は除いています。  1 月   そもそも今年のテーマは Computer Science の基礎を固めることでした。もう少し具体的に言うと、OS, CPU, Network, Container の仕組みをコードレベルで勉強したいと考えていました。そこで、まずコンピュータの全体像を掴むために、以下の本を 2 月中旬まで読んでいました。
 コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方    この本は Nand to Tetris とも呼ばれるのですが、CPU を構成する回路 (例えば全加算器や ALU) を VHDL で実装して、エミュレータで動かすところからレイヤーを徐々に上げていきます。作成した基本的な回路を元に、CPU をエミュレートします。その後、機械語やアセンブリ言語やスタックを学び、VM、独自言語のコンパイラをインクリメンタルに実装していきます。この本と付随する演習問題を全て解くことを通して、 CPU や VM と言った普段は意識しない低レイヤなものの振る舞いをなんとなくイメージできるようになりました。
  2 月   コンピュータシステムの理論と実装を読んで、特にアセンブリとコンパイラに興味を持ちました。そこで、以下の本と資料を読み始めました。
 はじめて学ぶバイナリ解析　不正なコードからコンピュータを守るサイバーセキュリティ技術 低レイヤを知りたい人のためのCコンパイラ作成入門    前者に関しては、CTFer にはおなじみですが、セキュリティ的な観点からスタックやアセンブリを学べました。初心者向けの本だったので、コンピュータシステムの理論と実装の復習にもなり、学びになりました。
  後者に関しては、 C 言語のコンパイラをテストコードと共にインクリメンタルに実装していくものです。このコンパイラを実装できれば、自作コンパイラのコードそのものや、xv6 をコンパイルできるとワクワクしていました。しかし、C 言語の理解が学部 1 年生レベルで止まっていたこともあり、型をコンパイルしてアセンブリを吐き出せるようになる手前で挫折してしまいました。毎日付けているノートを振り返ると、C 言語の理解の浅さとアセンブリ言語の知識が足りなかったと反省しています。</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://hakiwata.jp/post/20210430/</link>
      <pubDate>Fri, 30 Apr 2021 03:03:17 +0900</pubDate>
      
      <guid>https://hakiwata.jp/post/20210430/</guid>
      <description>サイトの移行  こんにちは！もともと自分のポートフォリオを Amazon EC2 にデプロイしていたのですが、AWS Education で割り当てられたクレジットが切れたので、Hugo + GitHub Pages で新しく作り直しました。思い立って 2 時間ほどで移行できたので、非常に便利だと思いました。  </description>
    </item>
    
  </channel>
</rss>