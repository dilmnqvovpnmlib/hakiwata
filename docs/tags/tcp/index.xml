<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCP on haKiwata</title>
    <link>https://hakiwata.jp/tags/tcp/</link>
    <description>Recent content in TCP on haKiwata</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2021 haKiwata</copyright>
    <lastBuildDate>Sat, 29 May 2021 00:08:15 +0900</lastBuildDate>
    
	<atom:link href="https://hakiwata.jp/tags/tcp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Network Programming の基礎を学んだ</title>
      <link>https://hakiwata.jp/post/20210529/</link>
      <pubDate>Sat, 29 May 2021 00:08:15 +0900</pubDate>
      
      <guid>https://hakiwata.jp/post/20210529/</guid>
      <description>概要  こんにちは！ゴールデンウィーク明けから 基礎からわかるTCP/IP ネットワーク実験プログラミング（第2版） を読んでいました。この本は マスタリングTCP/IP―入門編―(第6版) の著者の一人である 村山公保先生 が書かれた本です。丁度今日に読み終えたので、なぜ読み始めたのかや何を学んだかなどの記録を残したいと思います。  読み始めたきっかけと目的  この本を読もうと思ったきっかけは、システムプログラミングをしつつ、ネットワークプロトコル (Ethernet/ARP/IP/ICMP/TCP/UDP) を C 言語のプログラムレベルで理解したいと思ったからです。例えば TCP のヘッダの構造体は Ubuntu のどのパスに定義されていて、それを用いて、システムコールをどのように呼び出せば TCP のパケットを作って通信できるかなどです。大学/大学院の講義やマスタリングTCP/IP や普段の Web プログラミングを通して、基本的な通信の概念は知っていました。しかし、プロトコルをプログラムレベルでイメージできるほどは理解できていませんでした。そのため、ネットワークプロトコルの実装が C 言語のプログラムレベルでイメージできるようになることが、この本を読む目的でした。  学んだこと   この本を通して学んだことを列挙します。
 プログラムレベルでのプロトコルの解説 ネットワークプロトコルに必要な構造体、システムコール、ライブラリ関数の使い方とそれらの調査方法 socket システムコールを用いた UDP Client/UDP Server の実装 socket システムコールを用いた TCP Client/TCP Server の実装 パケットモニタリングを行い Ethernet/ARP/IP/ICMP/TCP/UDP のヘッダの解析 IP スキャン / TCP ポートスキャン / UDP ポートスキャン の実装 ARP 要求パケットや ARP 応答パケットを用いた対象のホストの ARP テーブルを書き換える攻撃手法の実装 ICMP redirect を用いた対象のホストのルーティングテーブルを書き換える攻撃手法の実装 IP ヘッダの TTL を用いた traceroute コマンドのようなものを実装 TCP のヘッダを作成し、SYN flood 攻撃の実装 TCP のヘッダを作成し、 ESTABLISHED な TCP のコネクションを強制的に切断する攻撃手法の実装 TCP のヘッダを作成し、TCP ジャックをする攻撃手法の実装    システムコールを用いた自作クライアントとサーバの実装、パケットモニタリング、攻撃手法の再現を通して、ネットワークプロトコルの構造や各レイヤーの関係性を学ぶことができました。読み応えのある非常に良い本でした。理解があやふやな箇所もあるので、期間を空けて本を読み直したいと思いました。</description>
    </item>
    
  </channel>
</rss>