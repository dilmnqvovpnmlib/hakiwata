<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Log on haKiwata</title><link>https://hakiwata.jp/log/</link><description>Recent content in Log on haKiwata</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2021 haKiwata</copyright><lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://hakiwata.jp/log/index.xml" rel="self" type="application/rss+xml"/><item><title>Python</title><link>https://hakiwata.jp/log/python/</link><pubDate>Fri, 03 Dec 2021 16:15:28 +0000</pubDate><guid>https://hakiwata.jp/log/python/</guid><description>概要 Python 関連の記事を読んだ際のメモを残す。 記事とメモ Python メモ – プライベート メソッド 関数名にの先頭に __ が付くと、プライベートメソッドになり、普通の呼び出し方では呼び出せない。しかし、どうしても呼び出したい時は、(インスタンス名)._(クラス名)(プライベートメソッド名) で呼び出すことが可能である。 Python メモ – データクラス @dataclasses をクラスにデコレートしメンバ変数に型と共に宣言する。そうすると、以前は必要だった __init__ メソッドの self 以降に指定する変数とその初期化を省略することができる。 ちなみに、以下の画像のように __init__ が呼び出される際に、定義した関数を呼び出すこともできる。 dataclasses &amp;mdash; データクラス Python メモ – セイウチ演算子 セイウチ演算子により広いスコープに変数を宣言しなくて済むので非常に便利な演算子である。ただし、Python 3.8 以降でないと使えない。 C++ の if などで使用した記憶があり、便利な印象だった。 代入式 Python メモ – 設定ファイル
uwsgi.ini といった ini ファイル を読み出す際に使える標準ライブラリである。python-dotenv の ini ファイル バージョンである。 configparser &amp;mdash; 設定ファイルのパーサー Python メモ – REST APIのテスト</description></item><item><title>CPython 調査ログ</title><link>https://hakiwata.jp/log/cpython/</link><pubDate>Wed, 17 Nov 2021 09:20:23 +0000</pubDate><guid>https://hakiwata.jp/log/cpython/</guid><description>概要 CPython のソースコードリーディングを行い、言語拡張やデータ構造がどのように C 言語で実装されているかを調査する。今回の調査で使用している Python は Python 3.11.0a2+ である。 調査ログ 2021/11/16 初期設定とプログラムのビルドを行う。ディレクトリは git から落としてきた cpython ディレクトリで行う。-g オプションで実行ファイルにデバッグシンボルを埋め込む。そして、-O0 オプションで最適化度合いを最低に落とす。こうすると、GDB などのデバッガでデバッグの情報を読み出すことができる。また、--prefix オプションでインストールするフォルダを指定する。 cd oss/ git clone https://github.com/python/cpython.git cd cpython CFLAGS=&amp;#34;-O0 -g&amp;#34; ./configure --with-pydebug --prefix=/home/h-kiwata/fuga make -j $(nproc) make install ${HOME}/fuga/bin/python3 main.py でビルドしたバイナリで Python のファイルを実行することができる。ちなみに、main.py の中身は以下である。 a = 1000 a += 20 print(&amp;#39;Hello World&amp;#39;) GDB のよく使うオプション run step (s) next (n) delete (d) i b continue until 参考 Python Developer’s Guide Changing CPython’s Grammar 2021/11/17 token のオブジェクトの中身を見てみる。</description></item></channel></rss>